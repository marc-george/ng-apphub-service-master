{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8ebf6e9a6848baa46741","webpack:///./src/index.js","webpack:///external \"angular\"","webpack:///./services/apphub.es6.js"],"names":["appHubModule","module","service","run","$log","GLOBAL_KEY","STATE_KEY","locations","AppHubService","$window","uappId","id","getCurrentApp","nav","paths","getContext","curPath","location","pathname","toLowerCase","navItems","key","hasOwnProperty","indexOf","region","i","len","items","length","item","nextId","substring","lastIndexOf","itemPath","RegExp","test","value","curState","getLocalStore","p","setLocalStore","console","error","appId","k","sessionStorage","setItem","JSON","stringify","app","getItem","v","parse","removeItem","getPath","contextPath","message","event","CustomEvent","detail","dispatchEvent","action","user","preferredLocale","serviceFactory","$inject"],"mappings":"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","file":"ng-apphub-service.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"angular\")) : factory(root[\"angular\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8ebf6e9a6848baa46741","import angular from 'angular';\nimport AppHubService from '../services/apphub.es6';\n\n/**\n * @ngdoc object\n * @name AppHubModule\n * @description\n * A set of common utilities for AppHub.\n * @example\n * ```\n    import AppHubModule from './<path to main>/module.js';\n    let AppModule = angular.module('app', ['AppHubModule']);\n * ```\n */\nlet appHubModule = angular.module('AppHubModule', [])\n\n  // Services\n  .service('AppHubService', AppHubService)\n\n  .run(['$log', function($log){}]);\n\nexport default appHubModule;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 1\n// module chunks = 0","\nconst GLOBAL_KEY = \"_apphub\";\nconst STATE_KEY = 'state';\nconst locations = ['main', 'settings', 'profile'];\n\n/**\n * @ngdoc service\n * @name AppHubModule.service:AppHubService\n * @author j.defrisco@ge.com\n * @memberOf AppHubModule\n * @description AppHub convenience methods\n */\nclass AppHubService {\n\n    constructor($window){\n        this.$window = $window;\n    }\n\n    /**\n     * @ngdoc\n     * @name AppHubService#getPath\n     * @methodOf AppHubModule.service:AppHubService\n     * @description\n     * Given a microapp id, get the path to the microapp\n     * If no id is supplied, returns the path to the current microapp\n     * @example\n     * ```\n     * let url = apphub.getPath('analytics');\n     * ```\n     */\n    getPath(uappId) {\n        let id = uappId ? uappId : this.getCurrentApp();\n        return  this.$window.nav && this.$window.nav.paths[id] ? this.$window.nav.paths[id] : this.getContext();\n    }\n\n    /**\n     * @ngdoc\n     * @name AppHubService#getCurrentApp\n     * @methodOf AppHubModule.service:AppHubService\n     * @description\n     * Return the id of the current microapp\n     * @example\n     * ```\n     * let url = apphub.getPath(apphub.getCurrentApp());\n     * ```\n     */\n    getCurrentApp() {\n        var id;\n        let curPath = this.$window.location.pathname.toLowerCase();  // this is how they appear in window.nav\n        let navItems = this.$window.nav && this.$window.nav.paths ? this.$window.nav.paths : {};\n\n        for(let key in this.$window.nav){\n            if(this.$window.nav.hasOwnProperty(key) && locations.indexOf(key) !== -1){\n\n                let region = this.$window.nav[key];\n                for (let i = 0, len = region.items.length; i < len; i++) {\n                  let item = region.items[i];\n                  let nextId = item.id.substring(0,item.id.lastIndexOf('.'));\n                  let itemPath = new RegExp('^'+navItems[nextId] + '/','i');\n                  if(navItems.hasOwnProperty(nextId) && itemPath.test(curPath)){\n                      id = nextId;\n                      break;\n                  }\n              }\n                if(id){\n                    break;\n                }\n            }\n        }\n        return id ? id : null;\n    }\n\n    /**\n     * @ngdoc\n     * @name AppHubService#setState\n     * @methodOf AppHubModule.service:AppHubService\n     * @description\n     * Save some global (cross micro-app) state to local storage. Merges passed object with current state.\n     * @param {Object} value - an object holding the state to save\n     * @example\n     * ```\n     * apphub.setState(value);\n     * ```\n     */\n    setState(value) {\n        // require an object here\n        if (typeof value == 'object') {\n            let curState = this.getLocalStore(STATE_KEY, GLOBAL_KEY);\n            // merge in new state\n            for (let p in value) {\n                if (value.hasOwnProperty(p)) {\n                    curState[p] = value[p];\n                }\n            }\n            this.setLocalStore(STATE_KEY, curState, GLOBAL_KEY);\n        } else {\n            console.error('setState() called without an object to store');\n        }\n    }\n\n    /**\n     * @ngdoc\n     * @name AppHubService#getState\n     * @methodOf AppHubModule.service:AppHubService\n     * @description\n     * Retrieve the global (cross-microapp) state from local storage.\n     * @returns {Object} - if there is no local storage associated with the passed key, an empty object is returned.\n     * @example\n     * ```\n     * let curState = apphub.getState();\n     * ```\n     */\n    getState() {\n        return this.getLocalStore(STATE_KEY, GLOBAL_KEY);\n    }\n\n    /**\n     * @ngdoc\n     * @name AppHubService#setLocalStore\n     * @methodOf AppHubModule.service:AppHubService\n     * @description\n     * Save some app-specific info to local storage\n     * @param {string} key - the key used to store/retrieve the value\n     * @param {Object} value - an object holding the value to save\n     * @param {string=} appId - the appId to associate the key with. Defaults to the current microapp.\n     * @example\n     * ```\n     * apphub.setLocalStore(key, value);\n     * ```\n     */\n    setLocalStore(key, value, appId) {\n        let k = (appId || this.getCurrentApp()) + ':' + key;\n        this.$window.sessionStorage.setItem(k, JSON.stringify(value));\n    }\n\n    /**\n     * @ngdoc\n     * @name AppHubService#hasLocalStore\n     * @methodOf AppHubModule.service:AppHubService\n     * @description\n     * Tests to see if local storage exists for the key. appId is optional - defaults to current app.\n     * @param {string} key - the key used to store/retrieve the value\n     * @param {string=} appId - the appId to associate the key with. Defaults to the current microapp.\n     * @returns {Boolean} - true if there is local storage associated with the passed key\n     * @example\n     * ```\n     * if (apphub.getLocalStore('prefs')) {...;\n     * ```\n     */\n    hasLocalStore(key, appId) {\n        let app = appId || this.getCurrentApp();\n        return this.$window.sessionStorage.getItem(app + ':' + key) ? true : false;\n    }\n\n    /**\n     * @ngdoc\n     * @name AppHubService#getLocalStore\n     * @methodOf AppHubModule.service:AppHubService\n     * @description\n     * Get app-specific info from local storage. appId is optional - defaults to current app.\n     * @param {string} key - the key used to store/retrieve the value\n     * @param {string=} appId - the appId to associate the key with. Defaults to the current microapp.\n     * @returns {Object} - if there is no local storage associated with the passed key, an empty object is returned.\n     * @example\n     * ```\n     * let myvalue = apphub.getLocalStore('prefs');\n     * ```\n     */\n    getLocalStore(key, appId) {\n        let app = appId || this.getCurrentApp();\n        let v = this.$window.sessionStorage.getItem(app + ':' + key) || '{}';\n        return JSON.parse(v);\n    }\n\n    /**\n     * @ngdoc\n     * @name AppHubService#removeLocalStore\n     * @methodOf AppHubModule.service:AppHubService\n     * @description\n     * Remove app-specific info from local storage. appId is optional - defaults to current app.\n     * @param {string} key - the key used to store/retrieve the value\n     * @param {string=} appId - the appId to associate the key with. Defaults to the current microapp.\n     * @returns nothing\n     * @example\n     * ```\n     * apphub.removeLocalStore('prefs');\n     * ```\n     */\n    removeLocalStore(key, appId) {\n        let app = appId || this.getCurrentApp();\n        this.$window.sessionStorage.removeItem(app + ':' + key);\n    }\n\n    /**\n     * @ngdoc\n     * @name AppHubService#appAvailable\n     * @methodOf AppHubModule.service:AppHubService\n     * @description\n     * Return true if the app for the passed appId is accessible by the current user\n     * @example\n     * ```\n     * let appAvailable = apphub.appAvailable('someMicroappId');\n     * ```\n     */\n    appAvailable(uappId) {\n        return this.getPath(uappId) != this.getContext();\n    }\n    // convenience function to get the current multi-tenant context\n    getContext() {\n        return this.$window.nav && this.$window.nav.contextPath ? this.$window.nav.contextPath : '';\n    }\n\n  /**\n   * @ngdoc\n   * @name AppHubService#notify\n   * @methodOf AppHubModule.service:AppHubService\n   * @description\n   * Send message to pxh chrome oasts and notifications, this feature provides visual banner and notification queue list\n   * to user for notification purpose. Toasts are little messages for the user that appear at the bottom of the viewport\n   * on mobile, and at the upper-right corner of the browser window on tablet and mobile. Calling this method with required\n   * message object will get pxh chrome to show the message banner from top-down fashion, the same message will also be\n   * added in the notification list section next to the bottom of the navigation bar.\n   * @param {object} configuration object containing your application specific message plus several other\n   * properties that you can configure:\n   *   - icon : css class using font awesome (you can use all supported class see http://fontawesome.io/icons/)\n   *   - type : color (blue,red,orange,green)\n   *   - text : message text that you intend to notify user\n   *   - persistence: boolean, if false, then banner dismisses in a few seconds\n   *   - timestamp: time stamp(optional) if you choose to add this information\n   *   - actionLabel: action button text(optional)   if you would like to provide button for other user interaction\n   *   - actionCallback: call back function(optional)  when user clicks the action button on the toast banner\n   *   - actionLink: href(optional) that it will navigate user to when clicked\n   * ** Note: if you provide actionLink, do not provide actioinCallback as the same time.\n   * @example\n   * ```\n   * //In your controller, after you inject appHubService\n   *\n   *    let messageObj = {\n   *      type: 'red',\n   *      isPersistent: true,\n   *      icon: 'exclamation-circle',\n   *      text: 'Red Alert! System needs maintenance!',\n   *      actionLabel: 'OK',\n   *      timestamp: '9:55 AM',\n   *      actionCallback:  function(){ } //your call back function\n   *     };\n   *\n   *    this.apphubService.notify(messageObj);\n   *\n   *\n   *    let messageObjEx2 = {\n   *      type: 'orange',\n   *      isPersistent: false,\n   *      icon: 'rocket',\n   *      text: 'Calculation starting...'\n   *     };\n   *\n   *    this.apphubService.notify(messageObjEx2);\n   *\n   *\n   *    let messageObjEx3 = {\n   *      type: 'blue',\n   *      isPersistent: false,\n   *      icon: 'thumbs-o-up',\n   *      text: 'Room temperature is rising by 2 degree',\n   *      actionLabel: 'Go to google',\n   *      actionLink: 'http://google.com'\n   *     };\n   *\n   *    this.apphubService.notify(messageObjEx3);\n   * ```\n   */\n    notify(message) {\n\n      var event = new CustomEvent('apphub.notify', {detail: {message: message}});\n      this.$window.dispatchEvent(event);\n    }\n/**\n * @ngdoc\n * @name AppHubService#removeAllNotification\n * @methodOf AppHubModule.service:AppHubService\n * @description\n * Remove all pxh chrome notification list and toast messages on the page\n * @example\n * ```\n * //In your controller, after you inject appHubService\n * this.apphubService.removeAllNotification();\n *\n * ```\n * */\n    removeAllNotification() {\n      var event = new CustomEvent('apphub.notify', {detail: {message: null, action: 'removeAll'}});\n      this.$window.dispatchEvent(event);\n    }\n\n\n  /**\n   * @ngdoc\n   * @name AppHubService#getPreferredLocale\n   * @methodOf AppHubModule.service:AppHubService\n   * @description\n   * returns user preferred locale key if it is declared\n   * If locale key is found, returns the empty string\n   * @example\n   * ```\n   * let localeKey = apphub.getPreferredLocale();\n   * ```\n   */\n    getPreferredLocale() {\n      return  this.$window.nav && this.$window.nav.user && this.$window.nav.user.preferredLocale ? this.$window.nav.user.preferredLocale : '';\n    }\n\n\n\n\n    static serviceFactory($window){\n        return new AppHubService($window);\n    }\n\n\n}\n\n// class constants\n\n// Strict DI for minification (order is important)\nAppHubService.serviceFactory.$inject = ['$window'];\n\n// Export an instance\nexport default AppHubService.serviceFactory;\n\n\n\n// WEBPACK FOOTER //\n// ./services/apphub.es6.js"],"sourceRoot":""}